[gd_resource type="Shader" format=3 uid="uid://d02syo0ogdou4"]

[resource]
resource_local_to_scene = true
code = "shader_type spatial;

uniform sampler2DArray textures : hint_albedo;
uniform sampler2D cell_texture : hint_albedo;

uniform vec2 texel_size;

varying vec3 terrain;
varying vec3 visibility;

vec4 get_cell_data(vec3 uvw, int index)
{
	vec2 uv;
	
	uv.x = (uvw[index] + 0.5) * texel_size.x;
	
	float row = floor(uv.x);
	uv.x -= row;
	uv.y = (row + 0.5) * texel_size.y;
	
	vec4 data = texture(cell_texture, uv);
	data.a *= 255f;
	return data;
}

vec4 get_terrain_color(vec4 color, vec2 position, int index)
{	
	vec3 uvw = vec3(position.xy * 0.02, terrain[index]);
	vec4 c = texture(textures, uvw);
	return c * color[index] * visibility[index];
}

void vertex()
{
	vec3 uvw = vec3(UV, UV2.y);
	vec4 cell0 = get_cell_data(uvw, 0);
	vec4 cell1 = get_cell_data(uvw, 1);
	vec4 cell2 = get_cell_data(uvw, 2);
	
	terrain.x = cell0.a;
	terrain.y = cell1.a;
	terrain.z = cell2.a;
	
	visibility.x = cell0.r;
	visibility.y = cell1.r;
	visibility.z = cell2.r;
	
	visibility = mix(vec3(0.25), vec3(1f), visibility);
}

void fragment()
{
	vec2 pos = ((CAMERA_MATRIX) * vec4(VERTEX, 1f)).xz;
	
	vec4 c = get_terrain_color(COLOR, pos, 0) + get_terrain_color(COLOR, pos, 1) + get_terrain_color(COLOR, pos, 2);
	ALBEDO = c.rgb;
}"
