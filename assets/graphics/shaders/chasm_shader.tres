[gd_resource type="Shader" format=3 uid="uid://c6qntdwp2fv6m"]

[resource]
code = "shader_type spatial;
render_mode unshaded;

uniform vec4 chasm_color : source_color = vec4(0.2, 0.1, 0.35, 1.0);
uniform vec4 chasm_bottom_color : source_color = vec4(0, 0, 0,1.0);
uniform float chasm_intensity : hint_range(0, 20, 0.01) = 0.3;
varying mat4 CAMERA;

void vertex() {
  CAMERA = INV_VIEW_MATRIX;
}

void fragment() {

	// extract world position for everything behind the mesh
	float depth = texture(DEPTH_TEXTURE, SCREEN_UV).x; // read depth_texture
	vec3 ndc = vec3(SCREEN_UV * 2.0 - 1.0, depth); // convert to Normalized Device Coordinates in (-1,1) space
	vec4 view = INV_PROJECTION_MATRIX * vec4(ndc, 1.0); // convert NDC to view space. View space is positions relative to the camera, so z is the distance to the point
	view.xyz /= view.w;
	float linear_depth = -view.z; // camera is facing -Z, so view.z is negated

	vec4 world = CAMERA * INV_PROJECTION_MATRIX * vec4(ndc, 1.0); // convert view space to world position
	vec3 world_position = world.xyz / world.w;

	// calculate local depth below the fragment
	vec4 vertex_world = CAMERA * vec4(VERTEX, 1.0); // convert vertex coordinates to world coordinates
	float local_depth = (vertex_world.y - world_position.y); // calculate depth behind the mesh
	float offset_depth = exp(-local_depth * chasm_intensity); // higher chasm intensity factor decreases the perceived depth as the full-strength bottom color is reached faster
	offset_depth = clamp(offset_depth, 0.0, 1.0); // offset depth tends towards 0 as local depth increases, due to the exp(-z) expression
	
	// add chasm color
	vec4 color_gradient = mix(chasm_bottom_color, chasm_color, offset_depth); // bottom color comes first in the mix due to exp(-Z) above
	vec4 depth_color = mix(color_gradient, texture(SCREEN_TEXTURE,SCREEN_UV), offset_depth); // mix color gradient and underlying terrain
	
//	ALBEDO = vec3 (color_gradient.rgb); // use only for previewing the color gradient
	ALBEDO = vec3 (depth_color.rgb);
}"
